## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
### Descripción

The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.

Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. 
This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands.

SQL injection has become a common issue with database-driven web sites. 
The flaw is easily detected, and easily exploited, and as such, any site or product package with even a minimal user base is likely to be subject to an attempted attack of this kind. 
This flaw depends on the fact that SQL makes no real distinction between the control and data planes.

### Plataformas Aplicables

No hay un lenguaje específico que destaque en su uso.

Tecnologías:

Servidores de Bases de Datos

### Consecuencias Comunes

Confidencialidad: Dado que las bases de datos SQL suelen mantener datos sensitivos, la pérdida de confidencialidad es un problema frecuente con vulnerabilidades de inyección SQL

Control de Acceso: Si comandos SQL pobres son usados para revisar nombres de usuario y contraseñas, puede ser posible conectarse a un sistema como otro usuario sin conocimiento previo de la contraseña.

Control de Acceso: Si la información de autorización es mantenida en una base de datos SQL, es posible de obtener esta información a través de una explotación exitosa de una vulnerabilidad por inyección SQL.

Integridad: A la vez que es posible leer información sensitiva, también es posible cambiar o borrar esa información con un ataque de inyección SQL.

### Posibilidad de Explotación

Alta

### Mitigaciones potenciales

Fase: Arquitectura y Diseño
Estrategia: Librerias o Frameworks

Usar una libreria o framework verificado que no permita que se produzca la debilidad, o provea construcciones que hagan más fácil de evadir.

Estrategia: Parametrización

Si es posible, usar mecanismos estructurados para enforzar automáticamente la separación entre datos y código.
Estos mecanismos pueden proveer la codificación, citas y validaciones automáticamente, en vez de depender del desarrollador para proveer esta capacidad en cada punto donde se genera el output.

Estrategia: Endurecimiento de Entorno

Correr el código usando los menores privilegios requeridos para cumplimentar las tareas necesarias si es posible, crear cuentas aisladas con privilegios limitados para solo usarse en tareas únicas.
De esa forma, si hay un ataque con éxito, no dará acceso inmediato al resto del programa o su enterno.

Específicamente, seguir el principio del menor privilegio cuando se crean cuentas de usuario en una base de datos SQL.
Los usuarios solo deberian de tener los privilegios mínimos necesarios para usar su cuenta.
Si los requerimientos del sistema indican que un usuario puede leer y modificar sus propios datos, entonces limitad sus privilegios para que no pueda leer o escribir los datos de los demás.
Usar los permisos más estrictos posibles en todos los objetos de la base de datos.

Estrategia: Aplicación por Conversión

Cuando el set de objetos aceptables, como nombres de archivos o URLs, es limitado o conocido, crear un mapa de todos los sets de valores fijos a poner, (como IDs numéricos) de los nombres de archivos o URL actuales, y rechazar el resto.

Estrategia: Otros

Por cualquier chequeo de seguridad que se haya realizado en el lado del cliente, asegurate de que esos chequeos son duplicados en el lado del servidor.
Atacantes pueden sortear los chequeos del lado del cliente mediante la modificación de valores después de que esos chequeos hayan sido realizados, o mediante el cambio de cliente para eliminar los chequeos del lado de cliente enteramente.
Entonces, los valores modificados serán entregados al servidor.

Fase: Implementación

Estrategia: Codificacion de Output

Aunque sea arriesgado usar lineas dinámicamente generadas, código, o comandos que mezclan control y datos, algunas veces no puede seer evitado.
La aproximación más conservadora es de escapar o filtrar todos los carácteres que no pasen una lista de permisos extremadamente estricta. Si algunas veces esos carácteres son necesarios, como un espacio vacío, mete cada argumento en citas, después del filtrado. 

Es posible que estas características estén disponibles en el lenguaje de la base de datos.

Estrategia: Validación de input.



### Detecciones potenciales

### Referencias

Origen: https://cwe.mitre.org/data/definitions/89.html
